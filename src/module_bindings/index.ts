// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit fb41e50eb73573b70eea532aeb6158eaac06fae0).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { CallLambda } from "./call_lambda_reducer.ts";
export { CallLambda };
import { Publish } from "./publish_reducer.ts";
export { Publish };
import { Sethost } from "./sethost_reducer.ts";
export { Sethost };

// Import and reexport all table handle types
import { AppTableHandle } from "./app_table.ts";
export { AppTableHandle };
import { HostTableHandle } from "./host_table.ts";
export { HostTableHandle };
import { LambdaTableHandle } from "./lambda_table.ts";
export { LambdaTableHandle };
import { StoreTableHandle } from "./store_table.ts";
export { StoreTableHandle };

// Import and reexport all types
import { App } from "./app_type.ts";
export { App };
import { AppData } from "./app_data_type.ts";
export { AppData };
import { Host } from "./host_type.ts";
export { Host };
import { Lambda } from "./lambda_type.ts";
export { Lambda };
import { Store } from "./store_type.ts";
export { Store };

const REMOTE_MODULE = {
  tables: {
    app: {
      tableName: "app",
      rowType: App.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: App.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    host: {
      tableName: "host",
      rowType: Host.getTypeScriptAlgebraicType(),
    },
    lambda: {
      tableName: "lambda",
      rowType: Lambda.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: Lambda.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    store: {
      tableName: "store",
      rowType: Store.getTypeScriptAlgebraicType(),
      primaryKey: "key",
      primaryKeyInfo: {
        colName: "key",
        colType: Store.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    call_lambda: {
      reducerName: "call_lambda",
      argsType: CallLambda.getTypeScriptAlgebraicType(),
    },
    publish: {
      reducerName: "publish",
      argsType: Publish.getTypeScriptAlgebraicType(),
    },
    sethost: {
      reducerName: "sethost",
      argsType: Sethost.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.2.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "CallLambda", args: CallLambda }
| { name: "Publish", args: Publish }
| { name: "Sethost", args: Sethost }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  callLambda(other: Identity, app: bigint, lam: bigint, arg: string) {
    const __args = { other, app, lam, arg };
    let __writer = new BinaryWriter(1024);
    CallLambda.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("call_lambda", __argsBuffer, this.setCallReducerFlags.callLambdaFlags);
  }

  onCallLambda(callback: (ctx: ReducerEventContext, other: Identity, app: bigint, lam: bigint, arg: string) => void) {
    this.connection.onReducer("call_lambda", callback);
  }

  removeOnCallLambda(callback: (ctx: ReducerEventContext, other: Identity, app: bigint, lam: bigint, arg: string) => void) {
    this.connection.offReducer("call_lambda", callback);
  }

  publish(app: AppData) {
    const __args = { app };
    let __writer = new BinaryWriter(1024);
    Publish.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("publish", __argsBuffer, this.setCallReducerFlags.publishFlags);
  }

  onPublish(callback: (ctx: ReducerEventContext, app: AppData) => void) {
    this.connection.onReducer("publish", callback);
  }

  removeOnPublish(callback: (ctx: ReducerEventContext, app: AppData) => void) {
    this.connection.offReducer("publish", callback);
  }

  sethost(app: bigint, value: boolean) {
    const __args = { app, value };
    let __writer = new BinaryWriter(1024);
    Sethost.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("sethost", __argsBuffer, this.setCallReducerFlags.sethostFlags);
  }

  onSethost(callback: (ctx: ReducerEventContext, app: bigint, value: boolean) => void) {
    this.connection.onReducer("sethost", callback);
  }

  removeOnSethost(callback: (ctx: ReducerEventContext, app: bigint, value: boolean) => void) {
    this.connection.offReducer("sethost", callback);
  }

}

export class SetReducerFlags {
  callLambdaFlags: CallReducerFlags = 'FullUpdate';
  callLambda(flags: CallReducerFlags) {
    this.callLambdaFlags = flags;
  }

  publishFlags: CallReducerFlags = 'FullUpdate';
  publish(flags: CallReducerFlags) {
    this.publishFlags = flags;
  }

  sethostFlags: CallReducerFlags = 'FullUpdate';
  sethost(flags: CallReducerFlags) {
    this.sethostFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get app(): AppTableHandle {
    return new AppTableHandle(this.connection.clientCache.getOrCreateTable<App>(REMOTE_MODULE.tables.app));
  }

  get host(): HostTableHandle {
    return new HostTableHandle(this.connection.clientCache.getOrCreateTable<Host>(REMOTE_MODULE.tables.host));
  }

  get lambda(): LambdaTableHandle {
    return new LambdaTableHandle(this.connection.clientCache.getOrCreateTable<Lambda>(REMOTE_MODULE.tables.lambda));
  }

  get store(): StoreTableHandle {
    return new StoreTableHandle(this.connection.clientCache.getOrCreateTable<Store>(REMOTE_MODULE.tables.store));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
