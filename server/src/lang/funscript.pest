WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT    = _{ "//" ~ (!"\n" ~ ANY)* }

ident      = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
int        = @{ "-"? ~ ASCII_DIGIT+ }
float      = @{ "-"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
string     = @{ "\"" ~ ( "\\\"" | (!"\"" ~ ANY) )* ~ "\"" }
string2    = @{ "\'" ~ ( "\\\'" | (!"\'" ~ ANY) )* ~ "\'" }


boolean    = { "true" | "false" }
null       = { "null" }
undefined  = { "undefined" }

literal    = _{ float | int | string | string2 | boolean | null | undefined }

params     = { "(" ~ (ident ~ ("," ~ ident)*)? ~ ")" }
arglist    = { "(" ~ (expr ~ ("," ~ expr)*)? ~ ")" }
prop       = { ( ident | string ) ~ ":" ~ expr }

spread     = { "..." ~ expr }
arrayItem  = { expr | spread }

array      = { "[" ~ (arrayItem ~ ("," ~ arrayItem)* ~ (",")?)? ~ "]" }
object     = { "{" ~ ((prop | spread) ~ ("," ~ (prop|spread))*  )? ~ (",")? ~ "}" }

fun        = { params ~ "=>" ~ (block | expr) }

primary    = _{ literal | ident | array | object | "(" ~ expr ~ ")" | unop }

field = {"." ~ ident}
index = {"[" ~ expr ~ "]"}
access_chain = { primary ~ (field | index | arglist)+ }

operand    = { access_chain | primary }

mul_op           = { "*" | "/" | "%" }
add_op           = { "+" | "-" }
rel_op           = { ">=" | "<=" | ">" | "<" }
eq_op            = { "==" | "!=" }
nullish_op       = { "??" }
and_op           = { "&&" }
or_op            = { "||" }

multiplicative   = { operand ~ ( mul_op     ~ operand       )* }
additive         = { multiplicative ~ ( add_op ~ multiplicative )* }
relational       = { additive ~ ( rel_op ~ additive )* }
equality         = { relational ~ ( eq_op ~ relational )* }
nullish          = { equality ~ ( nullish_op ~ equality )* }
logical_and      = { nullish ~ ( and_op ~ nullish )* }
logical_or       = { logical_and ~ ( or_op ~ logical_and )* }

uop        = { "!" | "-" }
unop       = { uop ~ operand }

cond       = { logical_or ~ "?" ~ expr ~ ":" ~ expr }

expr       = _{ ( fun | cond | logical_or ) }

// Patterns for destructuring in let bindings
pattern_ident   = { ident }
rest_pattern    = { "..." ~ ident }
array_pattern   = { "[" ~ (pattern_ident ~ ("," ~ pattern_ident)*)? ~ ("," ~ rest_pattern)? ~ (",")? ~ "]" }
object_bind     = { (ident ~ ":" ~ ident) | ident }
object_pattern  = { "{" ~ (object_bind ~ ("," ~ object_bind)* ~ (",")?)? ~ "}" }
pattern         = _{ array_pattern | object_pattern | pattern_ident }

let_       = { "let" ~ pattern ~ "=" ~ expr ~ ";" }



expr_      = { expr ~ ( ";" | "," ) }

function_  = { "function" ~ ident ~ params ~ block }



stmt       = { return_ | let_ | expr_ | function_ | if_ }

return_    = { "return" ~ expr ~ ";"? }

block      = { "{" ~ stmt* ~ "}"} 

// Allow single-line if branches using expr_ (which consumes the trailing semicolon)
if_        = { "if" ~ "(" ~ expr ~ ")" ~ (expr_ | block) ~ ("else" ~ (if_ | (expr_ | block)))? }





program    = { SOI ~ expr ~ EOI }